
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author blake
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * A Main Object to pass the original main through to
     */
    public Main main;
   
    
    /**
     * A defulatListModel to hold the requested recipes to be displayed into 
     * the requested recipes list
     */
    public DefaultListModel dlm = new DefaultListModel();

    /**
     * When closed, only this frame is disposed instead of ending the program
     * @param operation 
     */
    @Override
    public void setDefaultCloseOperation(int operation) {
        this.dispose();
    }
    
    
    
    
    
    /**
     * Creates new form AdminPage
     */
    public AdminPage(Main main) {
        this.main = main;
        initComponents();
        
        
        
        
        // Set the list's model
        
        for (int i = 0; i < main.requestedRecipes.size(); i++) {
            dlm.addElement(main.requestedRecipes.get(i).getDishName());
        }
        
        reqList.setModel(dlm);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reqList = new javax.swing.JList<>();
        label = new javax.swing.JLabel();
        approveButton = new javax.swing.JButton();
        denyButton = new javax.swing.JButton();
        viewReq = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        reqList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(reqList);

        label.setBackground(new java.awt.Color(153, 204, 255));
        label.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("Requested Recipes");
        label.setOpaque(true);

        approveButton.setText("Approve Request");
        approveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveButtonActionPerformed(evt);
            }
        });

        denyButton.setText("Deny Request");
        denyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyButtonActionPerformed(evt);
            }
        });

        viewReq.setText("View Request");
        viewReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewReqActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(approveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewReq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(denyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(approveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(denyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewReq)))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * this method allows admins to approve a recipe to be added to the database
     * @param evt
     * @return none
     */
    private void approveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButtonActionPerformed
        int index = select(reqList);
        
        approve(main.requestedRecipes.get(index));
        this.dispose();
        this.main.recDis.dispose();
        RecipeDisplay rp = new RecipeDisplay(main, main.recipes);
        rp.show();
        AdminPage ap = new AdminPage(main);
        ap.show();
    }//GEN-LAST:event_approveButtonActionPerformed
    
    /**
     * this method allows admins to deny recipes from being added to the database
     * @param evt
     * @return none
     */
    private void denyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyButtonActionPerformed
        int index = select(reqList);
        String recName = main.requestedRecipes.get(index).getDishName();
        main.requestedRecipes.remove(index);
        JOptionPane.showMessageDialog(null, "The request for " + recName + " was denied!","Recipe Denied", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
        AdminPage ap = new AdminPage(main);
        ap.show();
    }//GEN-LAST:event_denyButtonActionPerformed
    
    /**
     * this method opens up a recipe to either approve or deny
     * @param evt
     * @return none
     */
    private void viewReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReqActionPerformed
        int index = select(reqList);
        RecipePage rp = new RecipePage(main.requestedRecipes.get(index), main);
        rp.show();
    }//GEN-LAST:event_viewReqActionPerformed
    
    /**
     * this method creates a menu out of the given arraylist
     * @param arrList
     * @return curr
     */
    public JList createViewableMenu(ArrayList arrList) {
        for (int i = 0; i < arrList.size(); i++) {
            dlm.addElement(arrList.get(i));
        }
        JList curr = new JList();
        curr.setModel(dlm);
        return curr;
    }
    
    /**
     * this method allows selection within the menu
     * @param list
     * @return int
     */
    public int select(JList list) {
        return list.getSelectedIndex();
    }
    
    /**
     * this method allows for a recipe to be apporved or not
     * @param rec
     * @return boolean
     */
    public boolean approve(recipe rec) {
        String recName = rec.getDishName();
        try {
                if (main.requestedRecipes.remove(rec) == true) {
                main.recipes.add(rec);
                save();
                main.requestedRecipes.remove(rec);
                JOptionPane.showMessageDialog(null, "The request for " + recName + " was approved!","Recipe Approved", JOptionPane.INFORMATION_MESSAGE); 
                main.requestedRecipes.remove(rec);
                return true;   
            } else {
                return false;
            }
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "The request for " + recName + " was not approved","Recipe Not Approved", JOptionPane.ERROR_MESSAGE);  
            return false;
        }
        
    }
    
    /**
     * this method saves the recipe database
     * @param none
     * @return none
     */
    public void save() {
        main.saveRecipes();
    }
    
    /**
     * this method opens the comment board for each recipe
     * @param recipe
     * @return boolean
     */
    public boolean remove(recipe rec) {
        try {
            if (main.recipes.contains(rec)) {
                main.recipes.remove(rec);
                main.recDis.dispose();
                RecipeDisplay rd = new RecipeDisplay(main, main.recipes);
                rd.show();
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveButton;
    private javax.swing.JButton denyButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JPanel panel;
    private javax.swing.JList<String> reqList;
    private javax.swing.JButton viewReq;
    // End of variables declaration//GEN-END:variables
}

    
