
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListModel;

public class RecipeDisplay extends javax.swing.JFrame {
    
    public RecPanel[] panels;
    public Main main;
    public ArrayList<recipe> recipes = new ArrayList<>();
    public DefaultListModel model = new DefaultListModel();
    public User currentUser = new User("", "");

    /**
     * Creates new form RecipeDisplay
     * @param main,recipes
     */
    public RecipeDisplay(Main main, ArrayList<recipe> recipes) {
        this.main = main;
        this.recipes = recipes;
        this.currentUser = main.currentUser;
        initComponents();
        // FullScreen
        setExtendedState(JFrame.MAXIMIZED_BOTH);    
        //Calls the method to set up the panels
        // that will hold the Text Areas,
        // X buttons, and Labels
        panelSetUp();
        panelClickSetUp();
        
        setCuisineList();
        
        if (main.currentUser != null) {
            welcomeLabel.setText("Welcome  " + currentUser.getFirstName());
            if (!main.currentUser.isAdmin) {
                userButton.setVisible(false);
                reqRecButton.setVisible(false);
            }
        }
        
        this.main.recDis = this;
        
        
        
        
    }
    
    /**
    * Makes a list of cuisine types in the database to then be filterable
    * @param none
    * @return none
    */
    public void setCuisineList() {
        model = new DefaultListModel<>();
        TreeSet<String> set = new TreeSet<>();
        for (recipe r: recipes) {
            set.add(r.getCuisineType());
        }
        
        for (String s: set) {
            model.addElement(s);
        }
        cuisineList.setModel(model);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        resetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchIngredients = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cuisineList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        minField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        maxField = new javax.swing.JTextField();
        cuisineFilterButton = new javax.swing.JButton();
        signOutButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        sortCuisine = new javax.swing.JButton();
        sortCalories = new javax.swing.JButton();
        sortAlpha = new javax.swing.JButton();
        reqRecButton = new javax.swing.JButton();
        newRecButton = new javax.swing.JButton();
        userButton = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resetButton.setText("Reset Search and Filter Results to Default");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 102, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("RECIPE REPOSITORY");
        jLabel2.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(102, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SEARCH HERE");
        jLabel1.setOpaque(true);

        searchBar.setBackground(new java.awt.Color(204, 204, 204));

        searchButton.setBackground(new java.awt.Color(255, 204, 204));
        searchButton.setText("Search By Name");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchIngredients.setBackground(new java.awt.Color(255, 204, 204));
        searchIngredients.setText("Search By Ingredients");
        searchIngredients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIngredientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton)
                .addGap(18, 18, 18)
                .addComponent(searchIngredients)
                .addGap(0, 38, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setBackground(new java.awt.Color(102, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("FILTER HERE");
        jLabel3.setOpaque(true);

        cuisineList.setBackground(new java.awt.Color(204, 204, 204));
        cuisineList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(cuisineList);

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Filter By Calorie Count");
        jLabel4.setOpaque(true);

        jLabel6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Filter By Cuisine Type");
        jLabel6.setOpaque(true);

        minField.setBackground(new java.awt.Color(204, 204, 204));
        minField.setText("Minimum");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("-");

        maxField.setBackground(new java.awt.Color(204, 204, 204));
        maxField.setText("Maximum");

        cuisineFilterButton.setBackground(new java.awt.Color(255, 204, 204));
        cuisineFilterButton.setText("filter");
        cuisineFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuisineFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cuisineFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(119, 119, 119))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(maxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cuisineFilterButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        signOutButton.setBackground(new java.awt.Color(255, 153, 153));
        signOutButton.setText("Sign Out");
        signOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutButtonActionPerformed(evt);
            }
        });

        welcomeLabel.setBackground(new java.awt.Color(204, 204, 204));
        welcomeLabel.setFont(new java.awt.Font("Vivaldi", 0, 24)); // NOI18N
        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setBackground(new java.awt.Color(102, 255, 255));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Sort Here");
        jLabel7.setOpaque(true);

        sortCuisine.setText("Sort By Cuisine Type");
        sortCuisine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortCuisineActionPerformed(evt);
            }
        });

        sortCalories.setText("Sort By Calorie Count");
        sortCalories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortCaloriesActionPerformed(evt);
            }
        });

        sortAlpha.setText("Sort    Alphabetically");
        sortAlpha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAlphaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortCalories, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(56, 56, 56))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortCuisine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortCalories)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortAlpha)
                .addGap(0, 31, Short.MAX_VALUE))
        );

        reqRecButton.setText("View Requested Recipes");
        reqRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqRecButtonActionPerformed(evt);
            }
        });

        newRecButton.setText("Request A New Recipe");
        newRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRecButtonActionPerformed(evt);
            }
        });

        userButton.setText("Review Current Users");
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(signOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reqRecButton, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addComponent(newRecButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reqRecButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newRecButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(signOutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void panelClickSetUp() {
//        for (int i = 0; i < panels.length; i++) {
//            panels[i].addMouseListener(new java.awt.event.MouseAdapter() {
//
//                // When the mouse is clicked ...
//                // The primaryPanel is set as the panel clicked on;
//                // Unless selectionMode is true
//                // then when the mouse is clicked. the primaryPanel
//                // will swap locations with the secondaryPanel
//                public void mouseClicked(java.awt.event.MouseEvent evt) {
//                    
//                }
//            
//        }
    }

    
    
    /**
    * This method searches through the recipes for the dish name
    * @param evt
    * @return none
    */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        String input = searchBar.getText();
        for (int i = 0; i < recipes.size(); i++) {
            panels[i].setVisible(false);
        }
        for (int i = 0; i < recipes.size(); i++) {
            
            if (recipes.get(i).getDishName().contains(input)) {
                panels[i].setVisible(true);
            }
        }
        
    }//GEN-LAST:event_searchButtonActionPerformed
    
    /**
    * This method resets the main page after a search or filter is performed
    * to see all of the recipes once again
    * @param evt
    * @return none
    */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        this.dispose();
        RecipeDisplay rd = new RecipeDisplay(main, main.recipes);
        rd.show();
    }//GEN-LAST:event_resetButtonActionPerformed
    
    /**
    * This method searches through the ingredients of each recipe to find a match
    * @param evt
    * @return none
    */
    private void searchIngredientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIngredientsActionPerformed
        
        String input = searchBar.getText();
        for (int i = 0; i < recipes.size(); i++) {
            panels[i].setVisible(false);
        }
        for (int i = 0; i < recipes.size(); i++) {
            ArrayList<String> gredients = recipes.get(i).getIngredients();
            for (String g : gredients) {
                if (g.contains(input)) {
                    panels[i].setVisible(true);
                }
            }
        }
        
    }//GEN-LAST:event_searchIngredientsActionPerformed
    
    /**
    * This filter funtion allows the recipe display class to display the filtered results by cuisine
    * @param cuisine
    * @return none
    */
    private void filterCuisinePerformed(String cuisine) {                                                  

        for (int i = 0; i < recipes.size(); i++) {
            String cuisineType = recipes.get(i).getCuisineType();
            if(!(cuisineType.compareTo(cuisine) == 0)){
                panels[i].setVisible(false);
            }
        }
        
        // if my solution above doesn't work, just uncomment this below
//         for (int i = 0; i < recipes.size(); i++) {
//             panels[i].setVisible(false);
//         }
//         for (int i = 0; i < recipes.size(); i++) {
//             String cuisineType = recipes.get(i).getCuisineType();
//             if(cuisineType.compareTo(cuisine) == 0){
//                 panels[i].setVisible(true);
//             }
//         }

    }
    /**
    * This filter funtion allows the recipe display class to display the filtered results by calories greater than input
    * @param calories
    * @return none
    */
    private void filterCaloriesGreaterThanPerformed(int calories){
        
        for (int i = 0; i < recipes.size(); i++) {
            int test = recipes.get(i).getCalories();
            if(!(test >= calories)){
                panels[i].setVisible(false);
            }
        }
           // if my solution above doesn't work, just uncomment this below

//         for (int i = 0; i < recipes.size(); i++) {
//             panels[i].setVisible(false);
//         }
//         for (int i = 0; i < recipes.size(); i++) {
//             int test = recipes.get(i).getCalories();
//             if(test >= calories){
//                 panels[i].setVisible(true);
//             }
//         }

    }
    /**
    * This filter funtion allows the recipe display class to display the filtered results by calories less than input
    * @param calories
    * @return none
    */
    private void filterCaloriesLessThanPerformed(int calories){
        for (int i = 0; i < recipes.size(); i++) {
            int test = recipes.get(i).getCalories();
            if(!(test <= calories)){
                panels[i].setVisible(false);
            }
        }
           // if my solution above doesn't work, just uncomment this below

//         for (int i = 0; i < recipes.size(); i++) {
//             panels[i].setVisible(false);
//         }
//         for (int i = 0; i < recipes.size(); i++) {
//             int test = recipes.get(i).getCalories();
//             if(test >= calories){
//                 panels[i].setVisible(true);
//             }
//         }

    }
    /**
    * This filter funtion allows the recipe display class to display the filtered results by calories within a range
    * @param min,max
    * @return none
    */
    private void filterCaloriesRangePerformed(int min, int max){
        for (int i = 0; i < recipes.size(); i++) {
            int test = recipes.get(i).getCalories();
            if(!(test >= min && test <= max)){
                panels[i].setVisible(false);
            }
        }
        
           // if my solution above doesn't work, just uncomment this below

//         for (int i = 0; i < recipes.size(); i++) {
//             panels[i].setVisible(false);
//         }
//         for (int i = 0; i < recipes.size(); i++) {
//             int test = recipes.get(i).getCalories();
//             if(test >= min && test <= max){
//                 panels[i].setVisible(true);
//             }
//         }

    }
    /**
    * This method filters the recipes by cuisine type with a BUTTON
    * @param evt
    * @return none
    */
    private void cuisineFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuisineFilterButtonActionPerformed
        // Filter By Cuisine Type
        
        for (int i = 0; i < recipes.size(); i++) {
            panels[i].setVisible(true);
        }
        if (!cuisineList.isSelectionEmpty()) {
            filterCuisinePerformed(cuisineList.getSelectedValue());
        }
        boolean maxGo = true;
        boolean minGo = true;
        
        int x = -1;
        int y = -1;
        
        try {
            x = Integer.parseInt(minField.getText());
            
        } catch(Exception e) {
            minGo = false;
        }
        
        try {
            y = Integer.parseInt(maxField.getText());
        } catch (Exception e) {
            maxGo = false;
        }
        
        if (minGo && maxGo) {
            filterCaloriesRangePerformed(x, y);
            System.out.println(x + " " + y);
        } else if (minGo) {
            filterCaloriesGreaterThanPerformed(x);
            System.out.println(x + " " + y);
        } else if (maxGo) {
            filterCaloriesLessThanPerformed(y);
            System.out.println(x + " " + y);
        } else {
            
        }
        
        
        
        
    }//GEN-LAST:event_cuisineFilterButtonActionPerformed
    /**
    * This method signs an user out with a BUTTON
    * @param evt
    * @return none
    */
    private void signOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutButtonActionPerformed
        if (currentUser != null) {
            JOptionPane.showMessageDialog(null, currentUser.getFirstName() + ", you have successfully signed out.","Sign Out Complete", JOptionPane.INFORMATION_MESSAGE);
        }
        this.dispose();
        LogInPage lip = new LogInPage(main);
        lip.show();
        currentUser = null;
    }//GEN-LAST:event_signOutButtonActionPerformed
    /**
    * This method sorts by cuisines alphabetically
    * @param evt
    * @return none
    */
    private void sortCuisineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortCuisineActionPerformed
        //System.out.println(recipes.get(0) + " " + recipes.get(1) + " " + recipes.get(2) + " " + recipes.get(3));
        boolean changeMade = false;
        do {
            changeMade = false;
            for (int i = 0; i <recipes.size(); i++) {
                if (i < recipes.size() - 1) {
                if (recipes.get(i + 1).getCuisineType().compareTo(recipes.get(i).getCuisineType()) < 0 )  {
                    switchIndexes(i,i+1);
                    changeMade = true;
                }  
                }
            }    
        } while (changeMade == true);
        //System.out.println(recipes.get(0) + " " + recipes.get(1) + " " + recipes.get(2) + " " + recipes.get(3));
        
        RecipeDisplay rd = new RecipeDisplay(main, recipes);
        this.dispose();
        rd.show();
    }//GEN-LAST:event_sortCuisineActionPerformed
    
    /**
    * This method sorts the recipes alphabetically
    * @param evt
    * @return none
    */
    private void sortAlphaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAlphaActionPerformed
        //System.out.println(recipes.get(0) + " " + recipes.get(1) + " " + recipes.get(2) + " " + recipes.get(3));
        boolean changeMade = false;
        do {
            changeMade = false;
            for (int i = 0; i <recipes.size(); i++) {
                if (i < recipes.size() - 1) {
                if (recipes.get(i + 1).getDishName().compareTo(recipes.get(i).getDishName()) < 0)  {
                    switchIndexes(i,i+1);
                    changeMade = true;
                }  
                }
            }    
        } while (changeMade == true);
        //System.out.println(recipes.get(0) + " " + recipes.get(1) + " " + recipes.get(2) + " " + recipes.get(3));
        
        RecipeDisplay rd = new RecipeDisplay(main, recipes);
        this.dispose();
        rd.show();
    }//GEN-LAST:event_sortAlphaActionPerformed
   
    /**
    * This method sorts the recipes by calories
    * @param evt
    * @return none
    */
    private void sortCaloriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortCaloriesActionPerformed
        //System.out.println(recipes.get(0) + " " + recipes.get(1) + " " + recipes.get(2) + " " + recipes.get(3));
        boolean changeMade = false;
        do {
            changeMade = false;
            for (int i = 0; i <recipes.size(); i++) {
                if (i < recipes.size() - 1) {
                if (recipes.get(i + 1).getCalories() < recipes.get(i).getCalories())  {
                    switchIndexes(i,i+1);
                    changeMade = true;
                }  
                }
            }    
        } while (changeMade == true);
        //System.out.println(recipes.get(0) + " " + recipes.get(1) + " " + recipes.get(2) + " " + recipes.get(3));
        
        RecipeDisplay rd = new RecipeDisplay(main, recipes);
        this.dispose();
        rd.show();
        
    }//GEN-LAST:event_sortCaloriesActionPerformed
    
    /**
    * This method shows an admin an admin page to view requested recipes
    * @param evt
    * @return none
    */
    private void reqRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqRecButtonActionPerformed
        AdminPage ap = new AdminPage(main);
        ap.show();
        
    }//GEN-LAST:event_reqRecButtonActionPerformed

    private void newRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRecButtonActionPerformed
        ReqPage req = new ReqPage(main);
        req.show();
    }//GEN-LAST:event_newRecButtonActionPerformed

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userButtonActionPerformed
        UserReviewPage rvp = new UserReviewPage(main);
        rvp.show();
    }//GEN-LAST:event_userButtonActionPerformed
    
    /**
    * This method switches indexes of recipes for swapping
    * @param x,y
    * @return none
    */
    public void switchIndexes(int x, int y) {
        recipe curr = recipes.get(x);
        recipes.set(x, recipes.get(y));
        recipes.set(y, curr);
    }
    
    
    /**
    * This method sets up the whole page and organizes recipes
    * into panels
    * @param none
    * @return none
    */
    public void panelSetUp() {
        // Each panel is 200 by 200; however they require a border on each side of 20
        // Therefore their total dimensions are 220 by 220
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        // Returns the number of notes the user can fit on their screen horizontally
        // 220 is subtracted to save myself (220 * dim.height) on the right 
        //side of the frame
        int noteCapH = (dim.width - 210)/ 210;
        
        // Returns the number of notes the user can fit on their screen vertically
        int noteCapV = (dim.height)/ 170;
        
        // Creates an array to hold the panels based off of the total note Capacity
        panels = new RecPanel[noteCapH * noteCapV];
        System.out.println(panels.length);
        
        // Two integers to indicate how far along the x-axis we have created notes
        // and down the y-axis also
        int xMarker = 20;
        int yMarker = 120;
        
        for (int i = 0; i < recipes.size(); i++) {
            // If we don't have enough room to make a note along the x-axis
            // reset the axis to 0 (440 is needed left for another note;
            // 220 for the note; 220 for me to work on jframe
            if (dim.width - xMarker < 440) {
                xMarker = 20;
                yMarker += 170;
            }
            recipe rec = recipes.get(i);
            // Generate a new panel
            RecPanel newPanel = new RecPanel(rec, main);
            
            // Set the location of each panel,
            // set the size
            newPanel.setLocation(xMarker, yMarker);
            newPanel.setSize(210, 170);
            newPanel.setOpaque(true);
            newPanel.setVisible(true);
            // Move the xmarker to the right so that the notes don't
            // overlap
            xMarker += 210; 
            
            // Add the panel to the panels Array
            panels[i] = newPanel;
            
        }
        for (int i = 0; i < recipes.size(); i++) {
            this.add(panels[i]);    
        }
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cuisineFilterButton;
    private javax.swing.JList<String> cuisineList;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxField;
    private javax.swing.JTextField minField;
    private javax.swing.JButton newRecButton;
    private javax.swing.JButton reqRecButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchIngredients;
    private javax.swing.JButton signOutButton;
    private javax.swing.JButton sortAlpha;
    private javax.swing.JButton sortCalories;
    private javax.swing.JButton sortCuisine;
    private javax.swing.JButton userButton;
    public javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
